from datetime import datetime, date, time
from decouple import config
import telebot
import sqlite3
import time as timer
import pymorphy2

from keyboard_menus_methods import *

morph = pymorphy2.MorphAnalyzer()

TOKEN = config('token', default='')
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')


conn = sqlite3.connect('db/database.db', check_same_thread=False)
cursor = conn.cursor()


# –≤ 2:00 –ø–æ –ú–°–ö (–≤ 0:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ï–≤—Ä–æ–ø—ã (GMT+1)) –ø—Ä–∏—Å—ã–ª–∞—é—Ç—Å—è –ø–∏—Å—å–º–∞ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
time_of_msg = time(23, 10)  # 23:10:00 –ø–æ –ú–°–ö, –≤—Ä–µ–º—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è

month_dict = {'01': "–Ø–Ω–≤–∞—Ä—å", '02': "–§–µ–≤—Ä–∞–ª—å", '03': "–ú–∞—Ä—Ç", '04': "–ê–ø—Ä–µ–ª—å", '05': "–ú–∞–π", '06': "–ò—é–Ω—å",
              '07': "–ò—é–ª—å", '08': "–ê–≤–≥—É—Å—Ç", '09': "–°–µ–Ω—Ç—è–±—Ä—å", '10': "–û–∫—Ç—è–±—Ä—å", '11': "–ù–æ—è–±—Ä—å", '12': "–î–µ–∫–∞–±—Ä—å"}


def send_birthday_msg(name):
    """ –ø—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∫–∞–Ω–∞–ª–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø—Ä–∞–∑–¥–Ω—É–µ—Ç —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è """
    bot.send_message("@birthdaysGenshin",
                     "<b>{name}</b> —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω—É–µ—Ç —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!".format(name=name))
    # –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø–∞–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–¥–æ –∑–∞–º–µ–Ω–∏—Ç—å send_message –Ω–∞ send_photo
    # bot.send_photo("@birthdaysGenshin", photo, caption='–∂–µ–ª–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç')


def send_hello_msg(message):
    """ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–º —Å—Ç–∏–∫–µ—Ä–æ–º –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ """
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEFj9pi-XwJ6DuPzfFzrNhgFAo74cNd6gACPw8AAnqS-EtUlG9v__OqzSkE',
                     reply_markup=main_menu())


def send_closest_bday(message):
    """ –∏—â–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è """
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
    current_month = date.today().month
    current_day = date.today().day
    # –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å –±—É–¥—É—â–∏–º–∏ –î–† –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª 20.08, –æ–Ω –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –î–† –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 20.08-31.08)
    cursor.execute(f"SELECT * FROM birthdays where month = {current_month} AND day >= {current_day} ORDER BY day")
    characters = cursor.fetchall()  # –ª–∏—Å—Ç –∫–æ—Ä—Ç–µ–∂–µ–π

    if len(characters) == 0:  # –µ—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ —É–∂–µ –Ω–µ—Ç –≥—Ä—è–¥—É—â–∏—Ö –î–†, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –î–† —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        next_month = (current_month + 1) if current_month <= 11 else 1
        cursor.execute(f"SELECT * FROM birthdays where month = {next_month} ORDER BY day")
        characters = cursor.fetchall()

    closest_bday_persons = [characters[0][0]]  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç –∏–º—è –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞,
    day = characters[0][1]  # –∞ —Ç–∞–∫–∂–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    month = characters[0][2]
    characters.pop(0)  # —É–¥–∞–ª—è–µ–º –∏–∑ –ª–∏—Å—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
    for char in characters:  # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ª–∏—Å—Ç–µ
        if day == char[1]:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
            closest_bday_persons.append(char[0])  # –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ closest_bday_persons
        else:  # –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, —Ü–∏–∫–ª –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è
            break

    # –ø–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É, –æ—Ç–¥–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–¥ (–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤—ã—á–∏—Å–ª—è—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–∞—Ç–∞—Ö)
    today = date.today()
    year_today = today.year
    # —Ç–∞–∫ –∫–∞–∫ –ë–µ–Ω–Ω–µ—Ç —Ä–æ–¥–∏–ª—Å—è 29.02, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –∫–æ–¥ –Ω–µ –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤ –Ω–µ–≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥ –≤—ã—Å–≤–µ—Ç–∏—Ç—å –¥–∞—Ç—É 29 —Ñ–µ–≤—Ä–∞–ª—è
    isBennet = False
    if day == 29 and month == 2 and year_today % 4 != 0:
        closest_bday = f"{28}.{month}.{year_today}"
        isBennet = True
    else:
        closest_bday = f"{day}.{month}.{year_today}"

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –î–† –≤ —Ç–∏–ø date, –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º –∏ –î–†
    bday_format = datetime.strptime(closest_bday, "%d.%m.%Y").date()
    delta = (bday_format - today).days

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –î–†, —á—Ç–æ–±—ã –±—ã–ª –≤–∏–¥ 01.06, –∞ –Ω–µ 1.6
    str_day = "0" + str(day) if 1 <= day <= 9 else str(day)
    str_month = "0" + str(month) if 1 <= month <= 9 else str(month)
    date_of_closest_bday = f"{str_day}.{str_month}"

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π-–∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤
    chars = ""  # –µ—Å–ª–∏ –∏–º–µ–Ω –±–æ–ª—å—à–µ —á–µ–º 1, –æ–Ω–∏ –±—É–¥—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–º—è1, –∏–º—è2 –∏ –∏–º—è3 (–∏–ª–∏ –∏–º—è1 –∏ –∏–º—è2)
    if len(closest_bday_persons) > 1:
        for person in closest_bday_persons:
            if closest_bday_persons.index(person) == len(closest_bday_persons) - 1:
                chars = chars[:-2]
                chars += " –∏ " + person
            else:
                chars += person + ", "
    else:
        chars = closest_bday_persons[0]

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –î–† –ø–µ—Ä—Å–∞
    when = ""
    if delta == 0:
        when = "–°–µ–≥–æ–¥–Ω—è"
    elif delta == 1:
        when = "–ó–∞–≤—Ç—Ä–∞"
    elif delta == 2:
        when = "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
    else:
        if (11 <= delta <= 19) or (delta % 10 == 0) or (5 <= delta % 10 <= 9) \
                or (111 <= delta <= 119) or (211 <= delta <= 219) or (311 <= delta <= 319):
            when = f"–ß–µ—Ä–µ–∑ {delta} –¥–Ω–µ–π"
        elif 2 <= delta % 10 <= 4:
            when = f"–ß–µ—Ä–µ–∑ {delta} –¥–Ω—è"
        elif delta % 10 == 1:
            when = f"–ß–µ—Ä–µ–∑ {delta} –¥–µ–Ω—å"

    # –∑–∞–¥–∞–µ–º —á–∏—Å–ª–æ (–µ–¥./–º–Ω–æ–∂.) –∏ –≤—Ä–µ–º—è (–Ω–∞—Å—Ç./–±—É–¥—É—â.) –¥–ª—è —Å–∫–∞–∑—É–µ–º–æ–≥–æ
    celebrate = ""
    if len(closest_bday_persons) > 1 and delta == 0:
        celebrate = "–ø—Ä–∞–∑–¥–Ω—É—é—Ç"
    elif len(closest_bday_persons) > 1 and delta > 0:
        celebrate = "–±—É–¥—É—Ç –ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å"
    elif len(closest_bday_persons) == 1 and delta == 0:
        celebrate = "–ø—Ä–∞–∑–¥–Ω—É–µ—Ç"
    elif len(closest_bday_persons) == 1 and delta > 0:
        celebrate = "–±—É–¥–µ—Ç –ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å"

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if isBennet:
        response = f"{when}, {date_of_closest_bday}, {chars} {celebrate} —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! –ü–∏—Å—å–º–æ –ø—Ä–∏–¥–µ—Ç 28.02"
    else:
        response = f"{when}, {date_of_closest_bday}, {chars} {celebrate} —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!"

    # –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(message.chat.id, response, reply_markup=main_menu())


def send_bday_closest_to_my_bday(message):
    bot.send_message(message.chat.id, '‚öô –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—á–µ–Ω—å –Ω–µ—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ üò¢Ô∏è', reply_markup=main_menu())


def send_alphabet(message):
    """ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –∞–ª—Ñ–∞–≤–∏—Ç–æ–º """
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', reply_markup=alphabet_menu())


def send_list_of_chars(call):
    """ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ """
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
                          reply_markup=char_menu(call.data))


def send_bday_of_char(call):
    """ –∏—â–µ—Ç –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ–∏—Å–∫–µ """
    cursor.execute(f'SELECT * FROM birthdays where name = "{call.data}"')
    char = cursor.fetchone()  # –∫–æ—Ä—Ç–µ–∂
    # –ø–µ—Ä–µ–≤–æ–¥ —á–∏—Å–ª–æ–≤–æ–≥–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ (09 -> —Å–µ–Ω—Ç—è–±—Ä—è)
    month = str(char[2]) if len(str(char[2])) == 2 else '0' + str(char[2])
    month_text = ""
    for key, value in month_dict.items():
        if key == month:
            month_text = value
            break
    month_text = morph.parse(month_text)[0]
    month_text = month_text.inflect({'gent'})  # —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f"{call.data} –ø—Ä–∞–∑–¥–Ω—É–µ—Ç —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {char[1]} {month_text.word}",
                          reply_markup=btn_back_to_start())


def send_that_month_bdays(message):
    """
    –ø–æ–ª—É—á–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∏ –¥–æ—Å—Ç–∞–µ—Ç –∏–∑ –Ω–µ–µ –º–µ—Å—è—Ü. –ú–µ—Å—è—Ü –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ find_bdays_in_month(),
    –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –î–†, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
     """
    current_month = str(date.today().month)
    names_of_chars = "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n\n"
    text_of_msg = find_bdays_in_month(current_month, names_of_chars)
    bot.send_message(message.chat.id, text_of_msg, reply_markup=main_menu())


def send_bdays_of_selected_month(call, month):
    """
    –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂
    –∏ –∏—â–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å–ª–æ–≤–∞—Ä–µ (month_dict), –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç find_bdays_in_month(),
    —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –î–† –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    "
    """
    month_analyse = morph.parse(month)[0]
    month_loct = month_analyse.inflect({'loct'})  # –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂

    digit_month = ''
    for key, value in month_dict.items():  # –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞ –≤ —á–∏—Å–ª–æ–≤–æ–π (—è–Ω–≤–∞—Ä—å -> 01)
        if month == value:
            digit_month = key
    names_of_chars = "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ {month}:\n\n".format(month=month_loct.word)
    text_of_msg = find_bdays_in_month(digit_month, names_of_chars)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=text_of_msg,
                          reply_markup=month_menu())


def find_bdays_in_month(required_month, names_of_chars):
    """ –∏—â–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º –µ–º—É –º–µ—Å—è—Ü–µ """
    cursor.execute(f'SELECT * FROM birthdays where month = {required_month} ORDER BY day')
    characters = cursor.fetchall()  # –ª–∏—Å—Ç –∫–æ—Ä—Ç–µ–∂–µ–π
    for char in characters:
        day = str(char[1])
        if len(day) == 1:  # "–ø—Ä–∏–∫–ª–µ–∏–≤–∞–µ–º" 0 —Å–ø–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –¥–µ–Ω—å 1-9
            day = '0' + day
        month = str(char[2])
        if len(month) == 1:  # "–ø—Ä–∏–∫–ª–µ–∏–≤–∞–µ–º" 0 —Å–ø–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –º–µ—Å—è—Ü 1-9
            month = '0' + month
        birthday = f"{day}.{month}"
        names_of_chars += "{bday}: {name}\n".format(bday=birthday, name=char[0])
    return names_of_chars


def send_month_menu(message):
    """ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ" –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –º–µ—Å—è—Ü–∞–º–∏ """
    bot.send_message(message.chat.id, text="–ö–∞–∫–æ–π –º–µ—Å—è—Ü –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=month_menu())


def char_menu(letter):
    """
    –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –±—É–∫–≤—É –∏–∑ –∞–ª—Ñ–∞–≤–∏—Ç–∞, –∞ –∑–∞—Ç–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ –∏—â–µ—Ç –≤—Å–µ –∏–º–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –Ω–∞ —ç—Ç—É –±—É–∫–≤—É,
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Å–ø–∏—Å–æ–∫. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫
    """
    char_keyboard = types.InlineKeyboardMarkup()

    cursor.execute(f"SELECT name FROM birthdays where name LIKE '{letter}%' ORDER BY name")
    names_list = cursor.fetchall()  # –ª–∏—Å—Ç –∫–æ—Ä—Ç–µ–∂–µ–π

    for name in names_list:
        char_keyboard.add(types.InlineKeyboardButton(name[0], callback_data=name[0]))

    char_keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back"))
    return char_keyboard


def check_time():
    """
    –ú–µ—Ç–æ–¥ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ë–î, –µ—Å—Ç—å –ª–∏ –î–† –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å.
    –ö–æ–≥–¥–∞ –ë–î –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å—å, –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è.
    –ï—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ —Å–µ–≥–æ–¥–Ω—è –æ–Ω –µ—â–µ –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª –Ω–∏—á–µ–≥–æ,
    —Ç–æ–≥–¥–∞ –º–µ—Ç–æ–¥ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ –∏ –¥–µ–ª–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É, —á—Ç–æ –æ–Ω —ç—Ç–æ —Å–¥–µ–ª–∞–ª.
    –û—Ç–º–µ—Ç–∫–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
    """
    saved_date = ''
    is_msg_sent = False
    while True:
        today = date.today()
        if saved_date != today:
            saved_date = today
            is_msg_sent = False

        if int(today.day) == 28 and int(today.month) == 2 and int(today.year) % 4 != 0:
            cursor.execute(f"SELECT name FROM birthdays WHERE (day = 28 OR day = 29) AND month = 2")
        else:
            cursor.execute(f"SELECT name FROM birthdays WHERE day = {today.day} AND month = {today.month}")
        characters = cursor.fetchall()  # –ª–∏—Å—Ç –∫–æ—Ä—Ç–µ–∂–µ–π
        if len(characters) > 0:
            time_now = datetime.now().time()
            if time_now >= time_of_msg and not is_msg_sent:
                names = []
                for char in characters:
                    names.append(char[0])
                for name in names:
                    send_birthday_msg(name)
                    timer.sleep(15)
                is_msg_sent = True
        timer.sleep(600)  # —Å–æ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç
