from datetime import datetime, date, time
from decouple import config
import telebot
import time as timer
import pymorphy2

from keyboard_menus_methods import *

morph = pymorphy2.MorphAnalyzer()

TOKEN = config('token', default='')
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')

# –≤ 2:00 –ø–æ –ú–°–ö (–≤ 0:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ï–≤—Ä–æ–ø—ã (GMT+1)) –ø—Ä–∏—Å—ã–ª–∞—é—Ç—Å—è –ø–∏—Å—å–º–∞ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
time_of_msg = time(23, 10)  # 23:10:00 –ø–æ –ú–°–ö, –≤—Ä–µ–º—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è

month_dict = {'01': "–Ø–Ω–≤–∞—Ä—å", '02': "–§–µ–≤—Ä–∞–ª—å", '03': "–ú–∞—Ä—Ç", '04': "–ê–ø—Ä–µ–ª—å", '05': "–ú–∞–π", '06': "–ò—é–Ω—å",
              '07': "–ò—é–ª—å", '08': "–ê–≤–≥—É—Å—Ç", '09': "–°–µ–Ω—Ç—è–±—Ä—å", '10': "–û–∫—Ç—è–±—Ä—å", '11': "–ù–æ—è–±—Ä—å", '12': "–î–µ–∫–∞–±—Ä—å"}


def send_birthday_msg(name):
    bot.send_message("@birthdaysGenshin",
                     "<b>{name}</b> —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω—É–µ—Ç —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!".format(name=name))
    # –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø–∞–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–¥–æ –∑–∞–º–µ–Ω–∏—Ç—å send_message –Ω–∞ send_photo
    # bot.send_photo("@birthdaysGenshin", photo, caption='–∂–µ–ª–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç')


def send_hello_msg(message):
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEFj9pi-XwJ6DuPzfFzrNhgFAo74cNd6gACPw8AAnqS-EtUlG9v__OqzSkE',
                     reply_markup=main_menu())


def send_closest_bday(message):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∏ –∑–∞–æ–¥–Ω–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –æ—Ç—Ç—É–¥–∞ –≥–æ–¥ (–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è)
    today = date.today()
    year_today = str(today.year)
    year_today = "." + year_today

    closest_bday_persons = []
    delta = -1
    date_of_closest_bday = ""
    # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥—è –∏—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã) –¥–æ —Ç–µ—Ö –ø–æ—Ä,
    # –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à—É—é –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ (–≤ –±—É–¥—É—â–µ–º, –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º)
    for key in birthdays_and_names.keys():
        bday = key + year_today
        bday = bday.replace('.', '/')
        if (key == '29.02') and (
                int(year_today[3:]) % 4 != 0):  # –µ—Å–ª–∏ –¥–∞—Ç–∞ - 29 —Ñ–µ—Ä–≤–∞–ª—è, –Ω–æ –≥–æ–¥ –Ω–µ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
        else:
            bday_format = datetime.strptime(bday, "%d/%m/%Y")
            bday_format = bday_format.date()
        cur_delta = bday_format - today
        if cur_delta.days >= 0:  # –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—Ö–æ–¥–∏–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
            delta = cur_delta.days
            closest_bday_persons = birthdays_and_names[key]
            date_of_closest_bday = key
            break

    chars = ""  # –µ—Å–ª–∏ –∏–º–µ–Ω –±–æ–ª—å—à–µ —á–µ–º 1, –æ–Ω–∏ –±—É–¥—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–º—è1, –∏–º—è2 –∏ –∏–º—è3 (–∏–ª–∏ –∏–º—è1 –∏ –∏–º—è2)
    if len(closest_bday_persons) > 1:
        for person in closest_bday_persons:
            if closest_bday_persons.index(person) == len(closest_bday_persons) - 1:
                chars = chars[:-2]
                chars += " –∏ " + person
            else:
                chars += person + ", "
    else:
        chars = closest_bday_persons[0]

    when = ""
    if delta == 0:
        when = "–°–µ–≥–æ–¥–Ω—è"
    elif delta == 1:
        when = "–ó–∞–≤—Ç—Ä–∞"
    elif delta == 2:
        when = "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
    else:
        if (11 <= delta <= 19) or (delta % 10 == 0) or (5 <= delta % 10 <= 9) \
                or (111 <= delta <= 119) or (211 <= delta <= 219) or (311 <= delta <= 319):
            when = f"–ß–µ—Ä–µ–∑ {delta} –¥–Ω–µ–π"
        elif 2 <= delta % 10 <= 4:
            when = f"–ß–µ—Ä–µ–∑ {delta} –¥–Ω—è"
        elif delta % 10 == 1:
            when = f"–ß–µ—Ä–µ–∑ {delta} –¥–µ–Ω—å"

    celebrate = ""
    if len(closest_bday_persons) > 1 and delta == 0:
        celebrate = "–ø—Ä–∞–∑–¥–Ω—É—é—Ç"
    elif len(closest_bday_persons) > 1 and delta > 0:
        celebrate = "–±—É–¥—É—Ç –ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å"
    elif len(closest_bday_persons) == 1 and delta == 0:
        celebrate = "–ø—Ä–∞–∑–¥–Ω—É–µ—Ç"
    elif len(closest_bday_persons) == 1 and delta > 0:
        celebrate = "–±—É–¥–µ—Ç –ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å"

    bot.send_message(message.chat.id, f"{when}, {date_of_closest_bday}, {chars} {celebrate} —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è!",
                     reply_markup=main_menu())


def send_bday_closest_to_my_bday(message):
    bot.send_message(message.chat.id, '‚öô –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—á–µ–Ω—å –Ω–µ—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ üò¢Ô∏è', reply_markup=main_menu())


def send_alphabet(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', reply_markup=alphabet_menu())


def send_list_of_chars(call):
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
                          reply_markup=char_menu(call.data))


def send_bday_of_char(call):
    bday_of_char = ''
    exitFlag = False
    # —Ü–∏–∫–ª –∏—â–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–º—è –≤ —Å–ª–æ–≤–∞—Ä–µ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è
    for bday, names in birthdays_and_names.items():
        for name in names:
            if name == call.data:
                bday_of_char = bday
                exitFlag = True
                break
        if exitFlag:
            break
    # –ø–µ—Ä–µ–≤–æ–¥ —á–∏—Å–ª–æ–≤–æ–≥–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ (09 -> —Å–µ–Ω—Ç—è–±—Ä—è)
    month = bday_of_char[3:]
    month_text = ""
    for key, value in month_dict.items():
        if key == month:
            month_text = value
            break
    month_text = morph.parse(month_text)[0]
    month_text = month_text.inflect({'gent'})  # —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂

    # –µ—Å–ª–∏ –¥–µ–Ω—å —Ñ–æ—Ä–º–∞—Ç–∞ 01, 02, .., 09, —Ç–æ –æ–±—Ä–µ–∑–∞–µ–º 0 –≤ –Ω–∞—á–∞–ª–µ
    bday_of_char = bday_of_char[:2]
    if bday_of_char[0] == '0':
        bday_of_char = bday_of_char[1:]

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f"{call.data} –ø—Ä–∞–∑–¥–Ω—É–µ—Ç —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {bday_of_char} {month_text.word}",
                          reply_markup=btn_back_to_start())


def send_that_month_bdays(message):
    current_month = str(date.today())[5:7]
    names_of_chars = "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:\n\n"
    text_of_msg = find_bdays_in_month(current_month, names_of_chars)
    bot.send_message(message.chat.id, text_of_msg, reply_markup=main_menu())


def send_bdays_of_selected_month(call, month):
    month_analyse = morph.parse(month)[0]
    month_loct = month_analyse.inflect({'loct'})  # –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂

    digit_month = ''
    for key, value in month_dict.items():  # –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞ –≤ —á–∏—Å–ª–æ–≤–æ–π (—è–Ω–≤–∞—Ä—å -> 01)
        if month == value:
            digit_month = key
    names_of_chars = "–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ {month}:\n\n".format(month=month_loct.word)
    text_of_msg = find_bdays_in_month(digit_month, names_of_chars)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=text_of_msg,
                          reply_markup=month_menu())


def find_bdays_in_month(required_month, names_of_chars):
    for key in birthdays_and_names.keys():
        month_of_bday = key[3:]
        if required_month == month_of_bday:
            names = birthdays_and_names[key]
            names_one_day = ""
            if len(names) > 1:
                for name in names:
                    names_one_day += name + ", "
            if names_one_day == "":
                names_of_chars += "{bday}: {name}\n".format(bday=key, name=names[0])
            else:
                names_one_day = names_one_day[:-2]
                names_of_chars += "{bday}: {name}\n".format(bday=key, name=names_one_day)
    return names_of_chars


def send_month_menu(message):
    bot.send_message(message.chat.id, text="–ö–∞–∫–æ–π –º–µ—Å—è—Ü –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=month_menu())


def check_time():
    """
    –ú–µ—Ç–æ–¥ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π.
    –ö–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è.
    –ï—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ —Å–µ–≥–æ–¥–Ω—è –æ–Ω –µ—â–µ –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª –Ω–∏—á–µ–≥–æ,
    —Ç–æ–≥–¥–∞ –º–µ—Ç–æ–¥ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ –∏ –¥–µ–ª–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É, —á—Ç–æ –æ–Ω —ç—Ç–æ —Å–¥–µ–ª–∞–ª.
    –û—Ç–º–µ—Ç–∫–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
    """
    saved_date = ''
    is_msg_sent = False
    while True:
        today = date.today().strftime("%d.%m")
        if saved_date != today:
            saved_date = today
            is_msg_sent = False

        for birthday in birthdays_and_names.keys():
            if birthday == today:
                time_now = datetime.now().time()
                if time_now >= time_of_msg and not is_msg_sent:
                    names = birthdays_and_names[birthday]
                    for name in names:
                        send_birthday_msg(name)
                        timer.sleep(15)
                    is_msg_sent = True
        timer.sleep(600)  # —Å–æ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç
